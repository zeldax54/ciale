<?php

namespace GEMA\gemaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\HttpFoundation\Request;

/**
 * ToroRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ToroRepository extends EntityRepository
{

    public function listarDQL() {

        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->addSelect('T')
            ->from($this->getClassName(), 'T')

        ;
        return $qb;
    }

    public function filtrar(Request $request) {
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R","TR")
            ->from($this->getClassName(), "T")
            ->leftJoin("T.raza", "R")
             ->leftJoin("R.tiporaza", "TR")

        ;


        if ($request->request->get("searchPhrase") != null) {
            $search = $request->request->get("searchPhrase");
            $qb->where($qb->expr()->like("T.nombre", $qb->expr()->literal("%" . $search . "%")))
            ->orWhere($qb->expr()->like("T.apodo", $qb->expr()->literal("%" . $search . "%")))
            ->orWhere($qb->expr()->like("R.nombre", $qb->expr()->literal("%" . $search . "%")))
            ->orWhere($qb->expr()->like("TR.tipo", $qb->expr()->literal("%" . $search . "%")))
            ;

        }
        if ($request->request->get("sort") != null) {
            $orden = $request->request->get("sort");
           // print_r($orden);die();
            foreach ($orden as $key => $value) {
                $qb->orderBy("T." . $key, $value);
            }
        }
        return $qb;
    }

    public function torosByRazaName($nombre) {
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("A","R")
            ->from($this->getClassName(), "A")
            ->leftJoin('A.raza', "R")
            ->where("R.nombre='".$nombre."'");
               $qb->orderBy('A.apodo',"ASC");
        return $qb->getQuery()->getResult();
    }

    public function torosfullseach($dato) {
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("R")
            ->from($this->getClassName(), "R")
            ->where("R.nombre='".$dato."'")
            ->orWhere("R.padre='".$dato."'")
            ->orWhere("R.padremadre='".$dato."'")
            ->orWhere("R.apodo='".$dato."'")
        ;
        return $qb->getQuery()->getResult();
    }

    public function torosbyLike($dato){
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R")
            ->from($this->getClassName(), "T")
           // ->leftJoin('T.raza', "R")
            ->where("T.nombre like '%".$dato."%'")
            ->orWhere("T.padre like '%".$dato."%'")
            ->orWhere("T.padremadre like '%".$dato."%'")
            ->orWhere("T.apodo like '%".$dato."%'")
            ->orWhere("R.nombre like '%".$dato."%'")
            ->andWhere("T.publico=1")
            ->orderBy('T.apodo')
        ;
        return $qb->getQuery()->getResult();

    }



    public function torosbyRazas($razas){
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("A","R")
            ->from($this->getClassName(), "A")
            ->leftJoin('A.raza', "R");
        foreach($razas as $r)
            $qb->orWhere("R.id='".$r->getId()."'");


        $qb->andWhere("A.publico=1");
        $qb->orderBy('A.apodo',"ASC");
        return $qb->getQuery()->getResult();

    }

    public function torosbyRazaP($raza){
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R")
            ->from($this->getClassName(), "T")

            ->leftJoin('T.raza', "R")
            ->Where("T.publico=1");

        $qb  ->andWhere('R.id='.$raza->getId());
        $qb->orderBy('T.apodo',"ASC");
        return $qb->getQuery()->getResult();

    }


    public function torosPublicosByRazaAndTabla($razaId,$tablaName){

        $tabN='+'.str_replace(' ','+',$tablaName);
        $em=$this->getEntityManager();
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata($this->getClassName(), 't');
      //  $rsm->addRootEntityFromClassMetadata('MyProject\User', 'u');
        $queryText='SELECT * FROM toro  WHERE MATCH (tablagenetica) AGAINST (\'"'.$tabN.'"\' IN BOOLEAN MODE) and raza_id='.$razaId;
       // print($queryText);die();
      //  print($queryText);die();
        $query = $em->createNativeQuery('SELECT * FROM toro t WHERE MATCH (t.tablagenetica) AGAINST (\'"'.$tabN.'"\' IN BOOLEAN MODE) and publico=1 and t.raza_id='.$razaId,$rsm);
        $toros = $query->getResult(); // array of User objects
        return $toros;
    }

    public function torosByFPnotCPnotMyId($father,$fp,$razaId,$id,$toro){

        if($fp==null)
            $fp=0;
        if($father!=null){

            $qb = new QueryBuilder($this->getEntityManager());
            $qb
                ->select("T","R","P")
                ->from($this->getClassName(), "T")
                ->leftJoin('T.raza', "R")
                ->leftJoin('R.father', "P")
                ->Where("T.publico=1")
                ->Where('P.id='.$toro->getRaza()->getFather()->getId());
//            $qb  ->andWhere('R.id='.$razaId);
            $qb  ->andWhere('T.id<>'.$id);
            $qb  ->andWhere('T.CP=0');
            $qb  ->andWhere('T.facilidadparto='.$fp);

            return $qb->getQuery()->getResult();

        }
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R")
            ->from($this->getClassName(), "T")

            ->leftJoin('T.raza', "R")
            ->Where("T.publico=1");

        $qb  ->andWhere('R.id='.$razaId);
        $qb  ->andWhere('T.id<>'.$id);
        $qb  ->andWhere('T.CP=0');
        $qb  ->andWhere('T.facilidadparto='.$fp);

        return $qb->getQuery()->getResult();
    }

    public function torosMochoNotCpNotMyFacPartoNotMyId($fp,$razaId,$id,$father,$toro){
        if($fp==null)
            $fp=0;
        if($father!=null){

            $qb = new QueryBuilder($this->getEntityManager());
            $qb
                ->select("T","R")
                ->from($this->getClassName(), "T")

                ->leftJoin('T.raza', "R")
                ->leftJoin('R.father', "P")
                ->Where("T.publico=1")
                ->Where('P.id='.$toro->getRaza()->getFather()->getId());;

//            $qb  ->andWhere('R.id='.$razaId);
            $qb  ->andWhere('T.id<>'.$id);
            $qb  ->andWhere('T.CP=0');
            $qb  ->andWhere('T.facilidadparto<>'.$fp);
            $qb  ->andWhere('T.mocho=1');

            return $qb->getQuery()->getResult();
        }
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R")
            ->from($this->getClassName(), "T")

            ->leftJoin('T.raza', "R")
            ->Where("T.publico=1");

        $qb  ->andWhere('R.id='.$razaId);
        $qb  ->andWhere('T.id<>'.$id);
        $qb  ->andWhere('T.CP=0');
        $qb  ->andWhere('T.facilidadparto<>'.$fp);
        $qb  ->andWhere('T.mocho=1');

        return $qb->getQuery()->getResult();

    }


    public function getHijosfromRazaPadreMismaFP($razafatherid,$fp){

        if($fp==null)
            $fp=0;
        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R","P")
            ->from($this->getClassName(), "T")

            ->leftJoin('T.raza', "R")
            ->leftJoin('R.father', "P")

            ->Where("T.publico=1");
        $qb  ->andWhere('P.id='.$razafatherid);
        $qb  ->andWhere('T.facilidadparto='.$fp);
        return $qb->getQuery()->getResult();
    }


    public function DinamycGet($toro,$paramsArray){
        $id=$toro->getId();
        $paramsArray['raza']=$toro->getRaza();

        if(array_key_exists('facilidadparto', $paramsArray) && $paramsArray['facilidadparto']==null )
            $paramsArray['facilidadparto']=0;
        if(array_key_exists('mocho', $paramsArray) && $paramsArray['mocho']==null )
            $paramsArray['mocho']=0;
        if(array_key_exists('mocho', $paramsArray) && $paramsArray['mocho']==true )
            $paramsArray['mocho']=1;


        $qb = new QueryBuilder($this->getEntityManager());
        $qb
            ->select("T","R")
            ->from($this->getClassName(), "T")
            ->leftJoin('T.raza', "R");
        $qb->where('T.publico=1');
        $qb->andwhere('T.id<>'.$id);

        foreach($paramsArray as $key=>$param){
            if($key=='raza')
            {
                if($param->getFather()!=null){
                    $base='R.id='.$param->getId();
                  //  $qb ->andWhere('R.id='.$param->getId());
                    foreach($param->getFather()->getRazas() as $hija){
                        if($hija->getId()!=$param->getId()){
                            $base.=' or R.id='.$hija->getId();
                          //  $qb->orWhere('R.id='.$hija->getId());
                        }

                    }
                    $qb->andWhere($base);
                }
                    else
             $qb ->andWhere('R.id='.$param->getId());
            }
                elseif ($key=='mocho' && $param==0)
                    $qb  ->andWhere('T.mocho is null or T.mocho=0');
            else
            $qb  ->andWhere('T.'.$key.'='.$param);
        }

         //print ($qb->getDQL());die();
        return $qb->getQuery()->getResult();



    }

}
